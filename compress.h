
#ifndef _COMPRESS_H
#define _COMPRESS_H
#include <Wdm.h>
#include <Ntddk.h>

#define RIGHT 1
#define LEFT 0

/***********************************************************************************
структуры данных используемые при кодировании/декодировании
***********************************************************************************/
///структура данных с информацией о повторении значения в массиве
typedef struct character{
	UCHAR	value;	//значение встречающееся в кодируемом массиве
	USHORT	num;	//количество повторений данного значения
};
///структура данных представляющая из себя ветвь дерева
typedef struct tree{
	struct character* ch;	//указатель на структуру с данными о повторении значения
	struct tree* left;		//указатель на левую ветвь
	struct tree* right;		//указатель на правую ветвь
};
///структура данных содержащая код кодируемого значения
typedef struct code{
	USHORT n_bit;			//количество значащих бит
	USHORT bit_code;		//код
};
///структура данных содержащая информацию о значении и коде, которым оно кодируется
typedef struct dictionary{
	struct character* ch;	//указатель на структуру данных с информацией о повторении значения
	struct code* cd;		//указатель на структуру данных содержащую код
};
///структура данных содержащая основные параметры пакета данных
typedef struct packageData{
	USHORT	compressedSize;				//размер сжатых данных
	USHORT	decompressedSize;			//исходный размер
	USHORT	numOfSymbolsInDictionary;	//количество значений в словаре
	USHORT	nullBitsInLastByte;			//количество не значащих бит в крайнем байте
	USHORT	dictionaryOffset;			//смещение словаря в пакете
	USHORT	dataOffset;					//смещение сжатых данных в пакете
};

/***********************************************************************************
основные функции кодирования/декодирования данных
***********************************************************************************/

/**
	compress() главная функция осуществляющая вызов функций для подготовки к сжатию данных и вызов самой фукнции сжатия данных
	возвращает указатель на пакет данных
	принимаемые значения:
	data - указатель на массив сжимаемых данных
	size - размер сжимаемого массива
**/
PVOID compress(PVOID data, USHORT size);
/**
	decompress() функция осуществляющая вызов функций для подготовки к декомпрессии данных и саму декомпрессию
	возвращает указатель на восстановленые данные
	принимаемые значения:
	data - указатель на пакет данных
**/
PVOID decompress(PVOID data);

/***********************************************************************************
	функции выполняющие промежуточные действия при кодировании/декодировании данных
***********************************************************************************/

/**
	myMalloc() "обертка" для функции выделения памяти
**/
PVOID myMalloc(int size);
/**
	myFree() "обертка" для функции удаления выделенного участка памяти
**/
void myFree(void *mem);
/**
	getPackageData() функция возвращает структуру packageData с основными параметрами
	пакета данных
	принимаемые значения:
	input - указатель на пакет данных
**/
struct packageData getPackageData(PVOID input);
/**	
	pass0() считает количество повторений символов, создает массив только из встречающихся символов и сортирует его по убыванию
	функция возвращает указатель на массив структур character (в котором содержатся символы, встречающиеся в сжимаемом массиве, и 
	частота повторения этих символов)
	принимаемые значения:
	data - массив сжимаемых данных
	size - размер массива сжимаемых данных
	v_size - указатель по которому записывается размер возвращаемого массива
**/
struct character* pass0(PVOID data, USHORT size, PUSHORT v_size);
/**
	createTree() создает дерево для кодирования алгоритмом Хаффмана
	функция возвращает указатель на вершину дерева
	принимаемые значения:
	values - массив структур character с символами и их количеством в сжимаемом массиве
	v_size - количество элементов в массиве values
**/
struct tree* createTree(struct character* values, USHORT v_size);
/** 
	searchCharInTree() рекурсивная функция поиска значения в дереве, используется при создании словаря
	функция возвращает значение 1 если найдено искомое значение, иначе 0
	принимаемые значения:
	root - указатель на ветвь дерева
	data - искомое значение
	code - указатель на изменяемую структуру code в которую заносится количество значащих битов и код которым кодируется data 
**/
int searchCharInTree(struct tree* root, UCHAR data, struct code* code);
/** 
	createDictionary() создание словаря по дереву, используется только при кодировании в целях исключения множественного прохождения по дереву
	функция вовзращает указатель на массив указателей на структуры dictionary, в которых содержится информация о кодируемом значении и сам код
	принимаемые значения:
	root - указатель на ветвь дерева
	values - массив кодируемых значений
	v_size - размер массива values
**/
struct dictionary** createDictionary(struct tree* root, struct character* values, USHORT v_size);
/**
	getCharIndex() поиск символа в в словаре
	возвращает индекс элемента массива структур dictionary, в котором содержатся данные об искомом значении
	принимаемые значения:
	data - искомое значение
	dict - словарь, в котором осуществляется поиск
	v_size - размер словаря
**/
USHORT getCharIndex(UCHAR data, struct dictionary** dict, USHORT v_size);
/** 
	pass1() сжатие входных данных и формирование пакета данных (представляющего из себя сжатые данные и данные для декомпрессии)
	возвращает указатель на пакет данных 
	принимаемые значения:
	i_data - указатель на массив сжимаемых данных
	size - размер сжимаемого массива
	dict - словарь применяемый при сжатии
	v_size - размер словаря
**/
PUCHAR pass1(PVOID i_data, USHORT size, struct dictionary** dict, USHORT v_size);
#endif